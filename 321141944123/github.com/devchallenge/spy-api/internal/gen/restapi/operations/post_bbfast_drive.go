// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "github.com/devchallenge/spy-api/internal/gen/models"
)

// PostBbfastDriveHandlerFunc turns a function with the right signature into a post bbfast drive handler
type PostBbfastDriveHandlerFunc func(PostBbfastDriveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostBbfastDriveHandlerFunc) Handle(params PostBbfastDriveParams) middleware.Responder {
	return fn(params)
}

// PostBbfastDriveHandler interface for that can handle valid post bbfast drive params
type PostBbfastDriveHandler interface {
	Handle(PostBbfastDriveParams) middleware.Responder
}

// NewPostBbfastDrive creates a new http.Handler for the post bbfast drive operation
func NewPostBbfastDrive(ctx *middleware.Context, handler PostBbfastDriveHandler) *PostBbfastDrive {
	return &PostBbfastDrive{Context: ctx, Handler: handler}
}

/*PostBbfastDrive swagger:route POST /bbfastDrive postBbfastDrive

Returns phone numbers of fast drivers

Returns users who exceeds the speed on public roads. Request is used by DAI.

*/
type PostBbfastDrive struct {
	Context *middleware.Context
	Handler PostBbfastDriveHandler
}

func (o *PostBbfastDrive) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostBbfastDriveParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostBbfastDriveBody post bbfast drive body
// swagger:model PostBbfastDriveBody
type PostBbfastDriveBody struct {

	// from
	// Required: true
	From models.Timestamp `json:"from"`

	// Maximum length
	MaxLen int32 `json:"maxLen,omitempty"`

	// max location
	MaxLocation *PostBbfastDriveParamsBodyMaxLocation `json:"maxLocation,omitempty"`

	// min location
	MinLocation *PostBbfastDriveParamsBodyMinLocation `json:"minLocation,omitempty"`

	// Minimum speed in km/h
	MinSpped int32 `json:"minSpped,omitempty"`

	// to
	// Required: true
	To models.Timestamp `json:"to"`
}

// Validate validates this post bbfast drive body
func (o *PostBbfastDriveBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMaxLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMinLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBbfastDriveBody) validateFrom(formats strfmt.Registry) error {

	if err := o.From.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "from")
		}
		return err
	}

	return nil
}

func (o *PostBbfastDriveBody) validateMaxLocation(formats strfmt.Registry) error {

	if swag.IsZero(o.MaxLocation) { // not required
		return nil
	}

	if o.MaxLocation != nil {
		if err := o.MaxLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "maxLocation")
			}
			return err
		}
	}

	return nil
}

func (o *PostBbfastDriveBody) validateMinLocation(formats strfmt.Registry) error {

	if swag.IsZero(o.MinLocation) { // not required
		return nil
	}

	if o.MinLocation != nil {
		if err := o.MinLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "minLocation")
			}
			return err
		}
	}

	return nil
}

func (o *PostBbfastDriveBody) validateTo(formats strfmt.Registry) error {

	if err := o.To.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "to")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBbfastDriveBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBbfastDriveBody) UnmarshalBinary(b []byte) error {
	var res PostBbfastDriveBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostBbfastDriveOKBody post bbfast drive o k body
// swagger:model PostBbfastDriveOKBody
type PostBbfastDriveOKBody struct {

	// Phone numbers
	Phones []string `json:"phones"`
}

// Validate validates this post bbfast drive o k body
func (o *PostBbfastDriveOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostBbfastDriveOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBbfastDriveOKBody) UnmarshalBinary(b []byte) error {
	var res PostBbfastDriveOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostBbfastDriveParamsBodyMaxLocation post bbfast drive params body max location
// swagger:model PostBbfastDriveParamsBodyMaxLocation
type PostBbfastDriveParamsBodyMaxLocation struct {

	// Latitude in degrees
	// Maximum: 90
	// Minimum: -90
	Latitude *float32 `json:"latitude,omitempty"`

	// Longitude in degrees
	// Maximum: 180
	// Minimum: -180
	Longitude *float32 `json:"longitude,omitempty"`
}

// Validate validates this post bbfast drive params body max location
func (o *PostBbfastDriveParamsBodyMaxLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBbfastDriveParamsBodyMaxLocation) validateLatitude(formats strfmt.Registry) error {

	if swag.IsZero(o.Latitude) { // not required
		return nil
	}

	if err := validate.Minimum("body"+"."+"maxLocation"+"."+"latitude", "body", float64(*o.Latitude), -90, false); err != nil {
		return err
	}

	if err := validate.Maximum("body"+"."+"maxLocation"+"."+"latitude", "body", float64(*o.Latitude), 90, false); err != nil {
		return err
	}

	return nil
}

func (o *PostBbfastDriveParamsBodyMaxLocation) validateLongitude(formats strfmt.Registry) error {

	if swag.IsZero(o.Longitude) { // not required
		return nil
	}

	if err := validate.Minimum("body"+"."+"maxLocation"+"."+"longitude", "body", float64(*o.Longitude), -180, false); err != nil {
		return err
	}

	if err := validate.Maximum("body"+"."+"maxLocation"+"."+"longitude", "body", float64(*o.Longitude), 180, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBbfastDriveParamsBodyMaxLocation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBbfastDriveParamsBodyMaxLocation) UnmarshalBinary(b []byte) error {
	var res PostBbfastDriveParamsBodyMaxLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostBbfastDriveParamsBodyMinLocation post bbfast drive params body min location
// swagger:model PostBbfastDriveParamsBodyMinLocation
type PostBbfastDriveParamsBodyMinLocation struct {

	// Latitude in degrees
	// Maximum: 90
	// Minimum: -90
	Latitude *float32 `json:"latitude,omitempty"`

	// Longitude in degrees
	// Maximum: 180
	// Minimum: -180
	Longitude *float32 `json:"longitude,omitempty"`
}

// Validate validates this post bbfast drive params body min location
func (o *PostBbfastDriveParamsBodyMinLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBbfastDriveParamsBodyMinLocation) validateLatitude(formats strfmt.Registry) error {

	if swag.IsZero(o.Latitude) { // not required
		return nil
	}

	if err := validate.Minimum("body"+"."+"minLocation"+"."+"latitude", "body", float64(*o.Latitude), -90, false); err != nil {
		return err
	}

	if err := validate.Maximum("body"+"."+"minLocation"+"."+"latitude", "body", float64(*o.Latitude), 90, false); err != nil {
		return err
	}

	return nil
}

func (o *PostBbfastDriveParamsBodyMinLocation) validateLongitude(formats strfmt.Registry) error {

	if swag.IsZero(o.Longitude) { // not required
		return nil
	}

	if err := validate.Minimum("body"+"."+"minLocation"+"."+"longitude", "body", float64(*o.Longitude), -180, false); err != nil {
		return err
	}

	if err := validate.Maximum("body"+"."+"minLocation"+"."+"longitude", "body", float64(*o.Longitude), 180, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBbfastDriveParamsBodyMinLocation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBbfastDriveParamsBodyMinLocation) UnmarshalBinary(b []byte) error {
	var res PostBbfastDriveParamsBodyMinLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
