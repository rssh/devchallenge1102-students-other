// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/devchallenge/spy-api/internal/gen/models"
)

// PostBbfastDriveOKCode is the HTTP code returned for type PostBbfastDriveOK
const PostBbfastDriveOKCode int = 200

/*PostBbfastDriveOK OK

swagger:response postBbfastDriveOK
*/
type PostBbfastDriveOK struct {

	/*
	  In: Body
	*/
	Payload *PostBbfastDriveOKBody `json:"body,omitempty"`
}

// NewPostBbfastDriveOK creates PostBbfastDriveOK with default headers values
func NewPostBbfastDriveOK() *PostBbfastDriveOK {

	return &PostBbfastDriveOK{}
}

// WithPayload adds the payload to the post bbfast drive o k response
func (o *PostBbfastDriveOK) WithPayload(payload *PostBbfastDriveOKBody) *PostBbfastDriveOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post bbfast drive o k response
func (o *PostBbfastDriveOK) SetPayload(payload *PostBbfastDriveOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostBbfastDriveOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostBbfastDriveBadRequestCode is the HTTP code returned for type PostBbfastDriveBadRequest
const PostBbfastDriveBadRequestCode int = 400

/*PostBbfastDriveBadRequest Invalid arguments

swagger:response postBbfastDriveBadRequest
*/
type PostBbfastDriveBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostBbfastDriveBadRequest creates PostBbfastDriveBadRequest with default headers values
func NewPostBbfastDriveBadRequest() *PostBbfastDriveBadRequest {

	return &PostBbfastDriveBadRequest{}
}

// WithPayload adds the payload to the post bbfast drive bad request response
func (o *PostBbfastDriveBadRequest) WithPayload(payload *models.Error) *PostBbfastDriveBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post bbfast drive bad request response
func (o *PostBbfastDriveBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostBbfastDriveBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostBbfastDriveInternalServerErrorCode is the HTTP code returned for type PostBbfastDriveInternalServerError
const PostBbfastDriveInternalServerErrorCode int = 500

/*PostBbfastDriveInternalServerError General server error

swagger:response postBbfastDriveInternalServerError
*/
type PostBbfastDriveInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostBbfastDriveInternalServerError creates PostBbfastDriveInternalServerError with default headers values
func NewPostBbfastDriveInternalServerError() *PostBbfastDriveInternalServerError {

	return &PostBbfastDriveInternalServerError{}
}

// WithPayload adds the payload to the post bbfast drive internal server error response
func (o *PostBbfastDriveInternalServerError) WithPayload(payload *models.Error) *PostBbfastDriveInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post bbfast drive internal server error response
func (o *PostBbfastDriveInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostBbfastDriveInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
