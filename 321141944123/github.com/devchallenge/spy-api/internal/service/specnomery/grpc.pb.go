// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package specnomery

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AllowedUsersRequest struct {
	PhoneNumber          string   `protobuf:"bytes,1,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllowedUsersRequest) Reset()         { *m = AllowedUsersRequest{} }
func (m *AllowedUsersRequest) String() string { return proto.CompactTextString(m) }
func (*AllowedUsersRequest) ProtoMessage()    {}
func (*AllowedUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{0}
}

func (m *AllowedUsersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllowedUsersRequest.Unmarshal(m, b)
}
func (m *AllowedUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllowedUsersRequest.Marshal(b, m, deterministic)
}
func (m *AllowedUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedUsersRequest.Merge(m, src)
}
func (m *AllowedUsersRequest) XXX_Size() int {
	return xxx_messageInfo_AllowedUsersRequest.Size(m)
}
func (m *AllowedUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedUsersRequest proto.InternalMessageInfo

func (m *AllowedUsersRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type AllowedUsersReply struct {
	Result               bool     `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllowedUsersReply) Reset()         { *m = AllowedUsersReply{} }
func (m *AllowedUsersReply) String() string { return proto.CompactTextString(m) }
func (*AllowedUsersReply) ProtoMessage()    {}
func (*AllowedUsersReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{1}
}

func (m *AllowedUsersReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllowedUsersReply.Unmarshal(m, b)
}
func (m *AllowedUsersReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllowedUsersReply.Marshal(b, m, deterministic)
}
func (m *AllowedUsersReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedUsersReply.Merge(m, src)
}
func (m *AllowedUsersReply) XXX_Size() int {
	return xxx_messageInfo_AllowedUsersReply.Size(m)
}
func (m *AllowedUsersReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedUsersReply.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedUsersReply proto.InternalMessageInfo

func (m *AllowedUsersReply) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func init() {
	proto.RegisterType((*AllowedUsersRequest)(nil), "geoAllowance.AllowedUsersRequest")
	proto.RegisterType((*AllowedUsersReply)(nil), "geoAllowance.AllowedUsersReply")
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600) }

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2f, 0x2a, 0x48,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x49, 0x4f, 0xcd, 0x77, 0xcc, 0xc9, 0xc9, 0x2f,
	0x4f, 0xcc, 0x4b, 0x4e, 0x55, 0x32, 0xe7, 0x12, 0x06, 0x73, 0x52, 0x53, 0x42, 0x8b, 0x53, 0x8b,
	0x8a, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x14, 0xb8, 0xb8, 0x0b, 0x32, 0xf2, 0xf3,
	0x52, 0xfd, 0x4a, 0x73, 0x93, 0x52, 0x8b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x90, 0x85,
	0x94, 0xb4, 0xb9, 0x04, 0x51, 0x35, 0x16, 0xe4, 0x54, 0x0a, 0x89, 0x71, 0xb1, 0x15, 0xa5, 0x16,
	0x97, 0xe6, 0x94, 0x80, 0x75, 0x70, 0x04, 0x41, 0x79, 0x46, 0xd1, 0x5c, 0x3c, 0x89, 0x48, 0x8a,
	0x85, 0xbc, 0xb9, 0x58, 0x93, 0x33, 0x52, 0x93, 0xb3, 0x85, 0x14, 0xf5, 0x90, 0x5d, 0xa3, 0x87,
	0xc5, 0x29, 0x52, 0xf2, 0xf8, 0x94, 0x14, 0xe4, 0x54, 0x26, 0xb1, 0x81, 0xfd, 0x65, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x19, 0xd7, 0x7c, 0xea, 0xe5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AllowedUsersClient is the client API for AllowedUsers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AllowedUsersClient interface {
	Check(ctx context.Context, in *AllowedUsersRequest, opts ...grpc.CallOption) (*AllowedUsersReply, error)
}

type allowedUsersClient struct {
	cc *grpc.ClientConn
}

func NewAllowedUsersClient(cc *grpc.ClientConn) AllowedUsersClient {
	return &allowedUsersClient{cc}
}

func (c *allowedUsersClient) Check(ctx context.Context, in *AllowedUsersRequest, opts ...grpc.CallOption) (*AllowedUsersReply, error) {
	out := new(AllowedUsersReply)
	err := c.cc.Invoke(ctx, "/geoAllowance.allowedUsers/check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllowedUsersServer is the server API for AllowedUsers service.
type AllowedUsersServer interface {
	Check(context.Context, *AllowedUsersRequest) (*AllowedUsersReply, error)
}

func RegisterAllowedUsersServer(s *grpc.Server, srv AllowedUsersServer) {
	s.RegisterService(&_AllowedUsers_serviceDesc, srv)
}

func _AllowedUsers_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowedUsersServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geoAllowance.allowedUsers/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowedUsersServer).Check(ctx, req.(*AllowedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AllowedUsers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geoAllowance.allowedUsers",
	HandlerType: (*AllowedUsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "check",
			Handler:    _AllowedUsers_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
